// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"example.com/xxx/asset-service/internal/biz"
	"example.com/xxx/asset-service/internal/conf"
	"example.com/xxx/asset-service/internal/data"
	"example.com/xxx/asset-service/internal/server"
	"example.com/xxx/asset-service/internal/service"
	"github.com/go-kratos/kratos/v2"
	"go.uber.org/zap"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger *zap.Logger) (*kratos.App, func(), error) {
	db := data.NewDb(bootstrap)
	dataData, cleanup, err := data.NewData(bootstrap, db)
	if err != nil {
		return nil, nil, err
	}
	demoRepo := data.NewDemoRepo(dataData)
	demoUseCase := biz.NewDemoUseCase(demoRepo)
	demoService := service.NewDemoService(demoUseCase)
	grpcServer := server.NewGRPCServer(bootstrap, demoService)
	registrar := data.NewRegistrar(bootstrap)
	app := newApp(grpcServer, logger, registrar)
	return app, func() {
		cleanup()
	}, nil
}
